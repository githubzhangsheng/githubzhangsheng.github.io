(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{407:function(t,s,a){t.exports=a.p+"assets/img/1.259cd807.jpg"},524:function(t,s,a){"use strict";a.r(s);var v=a(24),p=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"tcp报文中的时间戳的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp报文中的时间戳的作用"}},[t._v("#")]),t._v(" TCP报文中的时间戳的作用")]),t._v(" "),v("p",[t._v("timestamp 是 TCP 报文首部的一个可选项，一共占 10 个字节，格式如下:")]),t._v(" "),v("div",{staticClass:"language-JS extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("kind")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 字节"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 字节"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 个字节"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("其中 info 有两部分构成: timestamp 和 timestamp echo，各占 4 个字节。")]),t._v(" "),v("p",[t._v("那么这些字段都是干嘛的呢？它们用来解决那些问题？")]),t._v(" "),v("p",[t._v("接下来我们就来一一梳理，TCP 的时间戳主要解决两大问题:")]),t._v(" "),v("ul",[v("li",[t._v("计算往返时延 RTT(Round-Trip Time)")]),t._v(" "),v("li",[t._v("防止序列号的回绕问题")])]),t._v(" "),v("h2",{attrs:{id:"计算往返时延-rtt"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#计算往返时延-rtt"}},[t._v("#")]),t._v(" 计算往返时延 RTT")]),t._v(" "),v("p",[t._v("在没有时间戳的时候，计算 RTT 会遇到的问题如下图所示:")]),t._v(" "),v("p",[v("img",{attrs:{src:a(407),alt:""}})]),t._v(" "),v("p",[t._v("如果以第一次发包为开始时间的话，就会出现左图的问题，RTT 明显偏大，开始时间应该采用第二次的；")]),t._v(" "),v("p",[t._v("如果以第二次发包为开始时间的话，就会导致右图的问题，RTT 明显偏小，开始时间应该采用第一次发包的。")]),t._v(" "),v("p",[t._v("实际上无论开始时间以第一次发包还是第二次发包为准，都是不准确的。")]),t._v(" "),v("p",[t._v("那这个时候引入时间戳就很好的解决了这个问题。")]),t._v(" "),v("p",[t._v("比如现在 a 向 b 发送一个报文 s1，b 向 a 回复一个含 ACK 的报文 s2 那么：")]),t._v(" "),v("ul",[v("li",[t._v("step 1: a 向 b 发送的时候，timestamp 中存放的内容就是 a 主机发送时的内核时刻 ta1。")]),t._v(" "),v("li",[t._v("step 2: b 向 a 回复 s2 报文的时候，timestamp 中存放的是 b 主机的时刻 tb, timestamp echo字段为从 s1 报文中解析出来的 ta1。")]),t._v(" "),v("li",[t._v("step 3: a 收到 b 的 s2 报文之后，此时 a 主机的内核时刻是 ta2, 而在 s2 报文中的 timestamp echo 选项中可以得到 ta1, 也就是 s2 对应的报文最初的发送时刻。然后直接采用 - ta2 - ta1 就得到了 RTT 的值。")])]),t._v(" "),v("h2",{attrs:{id:"防止序列号回绕问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#防止序列号回绕问题"}},[t._v("#")]),t._v(" 防止序列号回绕问题")]),t._v(" "),v("p",[t._v("现在我们来模拟一下这个问题。")]),t._v(" "),v("p",[t._v("序列号的范围其实是在0 ~ 2 ^ 32 - 1, 为了方便演示，我们缩小一下这个区间，假设范围是 0 ~ 4，那么到达 4 的时候会回到 0。")]),t._v(" "),v("p",[t._v("第几次发包\t发送字节\t对应序列号\t状态\n1\t0 ~ 1\t0 ~ 1\t成功接收")]),t._v(" "),v("p",[t._v("2\t1 ~ 2\t1 ~ 2\t滞留在网络中")]),t._v(" "),v("p",[t._v("3\t2 ~ 3\t2 ~ 3\t成功接收")]),t._v(" "),v("p",[t._v("4\t3 ~ 4\t3 ~ 4\t成功接收")]),t._v(" "),v("p",[t._v("5\t4 ~ 5\t0 ~ 1\t成功接收，序列号从0开始")]),t._v(" "),v("p",[t._v("6\t5 ~ 6\t1 ~ 2\t？？？")]),t._v(" "),v("p",[t._v("假设在第 6 次的时候，之前还滞留在网路中的包回来了，那么就有两个序列号为1 ~ 2的数据包了，怎么区分谁是谁呢？这个时候就产生了序列号回绕的问题。")]),t._v(" "),v("p",[t._v("那么用 timestamp 就能很好地解决这个问题，因为每次发包的时候都是将发包机器当时的内核时间记录在报文中，那么两次发包序列号即使相同，时间戳也不可能相同，这样就能够区分开两个数据包了。")])])}),[],!1,null,null,null);s.default=p.exports}}]);