(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{469:function(t,a,r){"use strict";r.r(a);var _=r(10),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),a("h2",{attrs:{id:"什么是-processs-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-processs-进程"}},[t._v("#")]),t._v(" 什么是 Processs 进程")]),t._v(" "),a("p",[t._v("操作系统支持在同一时间运行多个程序，每一个运行的程序都可以称之为一个进程。")]),t._v(" "),a("p",[t._v("An instance of a computer program that is being executed.")]),t._v(" "),a("p",[t._v("正在被计算机执行的计算机实例程序。")]),t._v(" "),a("p",[t._v("mac 活动监视器中，windows 任务管理中，一个应用就是一个进程。有的应用有多个进程。")]),t._v(" "),a("p",[t._v("进程是并发执行的程序在执行过程中资源（CPU、内存）分配和管理的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。进程是系统进行资源分配和调度的一个独立单位")]),t._v(" "),a("h2",{attrs:{id:"什么是-thread-线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-thread-线程"}},[t._v("#")]),t._v(" 什么是 Thread 线程")]),t._v(" "),a("p",[t._v("线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。")]),t._v(" "),a("p",[t._v("线程是进程的一个实体，是独立运行和独立调度的基本单位（CPU上真正运行的是线程）。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。")]),t._v(" "),a("h2",{attrs:{id:"进程和线程的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的关系"}},[t._v("#")]),t._v(" 进程和线程的关系")]),t._v(" "),a("p",[t._v("进程可以认为是一个车间，线程是进程车间里的工人。")]),t._v(" "),a("p",[t._v("操作系统包含多个进程。一个进程中包含多个线程。")]),t._v(" "),a("h3",{attrs:{id:"进程和线程之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程之间的区别"}},[t._v("#")]),t._v(" 进程和线程之间的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内存使用方面的区别：每个进程都有自己的由操作系统分配的内存地址空间，进程与进程之间的内存地址是独立。而线程可以共享本进程的地址空间。")])]),t._v(" "),a("li",[a("p",[t._v("通信机制方面的区别：默认情况下，进程之间很难互通（IPC），线程之间通信方便")])]),t._v(" "),a("li",[a("p",[t._v("量级方面的区别：线程更轻量，创建起来更快，使用资源更少。")])]),t._v(" "),a("li",[a("p",[t._v("资源：线程共享本进程的资源如内存、I/O、cpu等，不利于资源的管理和保护，而进程之间的资源是独立的，能很好的进行资源管理和保护。")])]),t._v(" "),a("li",[a("p",[t._v("可并发性：两者均可并发执行。")])]),t._v(" "),a("li",[a("p",[t._v("切换时：进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程不能用进程。")])]),t._v(" "),a("li",[a("p",[t._v("其他：线程是处理器调度的基本单位，但是进程不是。")])]),t._v(" "),a("li",[a("p",[t._v("健壮性：但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。")])])]),t._v(" "),a("h3",{attrs:{id:"进程间通信机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信机制"}},[t._v("#")]),t._v(" 进程间通信机制")]),t._v(" "),a("p",[t._v("IPC （interprocess communication）进程之间通讯")]),t._v(" "),a("ul",[a("li",[t._v("管道")]),t._v(" "),a("li",[t._v("FIFO")]),t._v(" "),a("li",[t._v("消息队列")]),t._v(" "),a("li",[t._v("信号量")]),t._v(" "),a("li",[t._v("共享内存区")])]),t._v(" "),a("h3",{attrs:{id:"线程间通信机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程间通信机制"}},[t._v("#")]),t._v(" 线程间通信机制")]),t._v(" "),a("ul",[a("li",[t._v("共享内存")]),t._v(" "),a("li",[t._v("管道通信")]),t._v(" "),a("li",[t._v("信号量")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程与线程的一个简单解释"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/125716637",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程与线程？（Process vs. Thread？）"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=v.exports}}]);