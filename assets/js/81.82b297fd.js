(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{416:function(t,r,o){"use strict";o.r(r);var s=o(10),a=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"symbol"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[t._v("#")]),t._v(" Symbol")]),t._v(" "),r("h2",{attrs:{id:"属性名的遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#属性名的遍历"}},[t._v("#")]),t._v(" 属性名的遍历")]),t._v(" "),r("p",[t._v("Symbol 作为属性名，遍历对象的时候，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。")]),t._v(" "),r("p",[t._v("但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。")]),t._v(" "),r("p",[t._v("由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。")]),t._v(" "),r("h2",{attrs:{id:"symbol-iterator"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#symbol-iterator"}},[t._v("#")]),t._v(" Symbol.iterator")]),t._v(" "),r("p",[t._v("对象的 Symbol.iterator 属性，指向该对象的默认遍历器方法。")])])}),[],!1,null,null,null);r.default=a.exports}}]);